<chapter id="spade.basic">
  <title>Basic Concepts</title>

  <para>This chapter is a short, casual introduction to Spade.
    If you're new to multi-agent systems, this chapter is definitely for
    you. We begin with a discussion of general multi-agent systems
    concepts, instant messaging and Jabber, and work our way into the 
    specific ideas behind SPADE.</para>

  <section id="spade.basic.mas">
    <title>Multi-Agent Systems</title>
    
    <para>A multi-agent system (MAS) is a system composed of several 
        software agents, collectively capable of reaching goals that are 
        difficult to achieve by an individual agent or monolithic system.</para>
    
    <para>The exact nature of the agents is a matter of some controversy. 
        They are sometimes claimed to be autonomous. For example a household 
        floor cleaning robot can be autonomous in that it is dependent on a 
        human operator only to start it up. On the other hand, in practice, 
        some agents are under active human supervision, becoming interdependent 
        systems.</para>

    <para>MAS systems are also referred to as "self-organized systems" as they tend 
        to find the best solution for their problems "without intervention". There is 
        high similarity here to physical phenomena, such as energy minimizing, where 
        physical objects tend to reach the lowest energy possible, within the physical 
        constrained world.</para>
    
    <para>The main feature which is achieved when developing MAS systems
        is flexibility, since a MAS system can be added to, modified and reconstructed, 
        without the need for detailed rewriting of the application. These systems also 
        tend to be rapidly self-recovering and failure proof, usually due to the heavy 
        redundancy of components and the self managed features, referred to, above.</para>
        
    <section id="spade.basic.mas.fipa">
        <title>Kickin'it FIPA style</title>
        
        <para>In order to prevent the proliferation of incompatible agent systems and to promote
            the agent-based technology and the interoperability of its standards with other technologies,
            the Foundation for Intelligent Physical Agents (FIPA) was formed. It is an IEEE Computer 
            Society standards organization.</para>
            
        <para>The FIPA has produced a set of documents (called "FIPA Specifications") that together
            conform the modern standard (or HOW-TO) in terms of agent technology. It starts with the definition
            of the agent platform, the "home" of the agents. It is the environment where the agents are placed
            and where their activities are performed. The software foundation for a MAS-based solution and
            the <emphasis>network server</emphasis> they connect to.</para>
            
        <para>The FIPA defines a model for an agent platform and a communication language for the agents.
            All the platforms that want to be FIPA-compliant should follow this model and understand the
            language, and SPADE is no exception. The compliance requires basically four features:</para>
            
        <itemizedlist>
            <listitem>
              <para>An Agent Communication Channel (ACC). A mechanism which allows the agents (and the platform itself)
                to communicate with one another.</para>
            </listitem>
            <listitem>
              <para>An Agent Management System (AMS). A way for the agents to be registered in the platform and to
                be reachable for contact (kind of a <emphasis>White Pages</emphasis> service).</para>
            </listitem>
            <listitem>
              <para>A Directory Facilitator (DF), which is a kind of public service in which agents publish the
                services they offer, something akin of a <emphasis>Yellow Pages</emphasis> service.</para>
            </listitem>
            <listitem>
              <para>Support for the FIPA Agent Communication Language (ACL), which is a common language for all
                agents to communicate with. Essentially, it is presented in a couple of flavors: one based on a
                Lisp-like syntax environment (using an obscene amount of parenthesis), and a clear, pure, practical and
                beautiful syntax based on XML.</para>
            </listitem>
        </itemizedlist>
        
        <para>SPADE implements all these features (and a few others) and thus is a FIPA-compliant platform.</para>
        
    </section>
    
  </section>

  <section id="spade.basic.im">
    <title>Instant Messaging</title>
    
    <para>Instant messaging (IM) is a form of real-time communication between two or more 
    people based on typed text. The text is conveyed via computers connected over a network 
    such as the Internet.</para>
    
    <para>Instant messaging offers real-time communication and allows easy collaboration, 
        which might be considered more akin to genuine conversation than email's "letter" format. 
        In contrast to e-mail, the parties know whether the peer is available. Most systems allow 
        the user to set an online status or away message so peers are notified when the user is available, 
        busy, or away from the computer. This is called the <emphasis>presence</emphasis> of the user. 
        On the other hand, people are not forced to reply immediately 
        to incoming messages. For this reason, some people consider communication via instant messaging 
        to be less intrusive than communication via phone. However, some systems allow the sending of 
        messages to people not currently logged on (offline messages), thus removing much of the difference 
        between IM and email.</para>
        
    <para>Instant messaging allows instantaneous communication between a number of parties simultaneously, 
        by transmitting information quickly and efficiently, featuring immediate receipt of acknowledgment 
        or reply. In certain cases IM involves additional features, which make it even more popular, 
        i.e. to see the other party, e.g. by using web-cams, or to talk directly for free over the internet.</para>
        
    <section id="spade.basic.im.jabber">
        <title>XMPP and Jabber</title>
        
        <para>Extensible Messaging and Presence Protocol (XMPP) is an open, XML-inspired protocol for near-real-time, 
            extensible instant messaging (IM) and presence information (a.k.a. buddy lists). It is the core protocol 
            of the Jabber Instant Messaging and Presence technology. The protocol is built to be extensible and other 
            features such as Voice over IP and file transfer signaling have been added.</para>
            
        <para>Unlike most instant messaging protocols, XMPP is based on open standards. Like e-mail, it is an open 
            system where anyone who has a domain name and a suitable Internet connection can run their own Jabber 
            server and talk to users on other servers. The standard server implementations and many clients are also 
            free and open source software.</para>
            
        <para>The Internet Engineering Task Force (IETF) formed an XMPP Working Group in 2002 to formalize the core 
            protocols as an IETF Instant Messaging and presence technology. The four specifications produced by the 
            XMPP WG were approved by the IESG as Proposed Standards in 2004. RFC 3920 and RFC 3921 are currently 
            undergoing revisions in preparation for advancing them to Draft Standard within the Internet Standards Process. 
            The XMPP Standards Foundation (formerly the Jabber Software Foundation) is active in developing open XMPP extensions.</para>
            
        <para>XMPP-based software is deployed on thousands of servers across the Internet and by 2003 was used
             by over ten million people worldwide, according to the XMPP Standards Foundation.[1] Popular commercial 
            servers include the <ulink url="http://www.gizmoproject.com/">Gizmo Project</ulink>. 
            Popular client applications include the freeware clients offered by 
            Google and the Gizmo Project, multi-protocol instant messengers such as 
            <ulink url="http://www.apple.com/ichat/">iChat</ulink> and 
            <ulink url="http://www.pidgin.im/">Pidgin</ulink> (formerly Gaim), 
            and free dedicated clients such as <ulink url="http://psi-im.org">Psi</ulink>. 
            <ulink url="http://www.google.com/talk/">Google Talk</ulink> provides XMPP gateways to its service.</para>
        
        <section id="spade.basic.im.jabber.features">
            <title>XMPP and Jabber Features</title>
            
            <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Open, public, and free.</emphasis>
    
                The Jabber protocol is open, public, free and well-documented, as opposed to other popular IM systems.
                The XMPP technology is well-documented and public by means of several RFC standard documents developed 
                by the Jabber Software Foundation. Any individual or organization can make use of XMPP technologies 
                without having to pay royalties, licenses, etc ...</para>
            
            </listitem>
            
            <listitem>
                <para><emphasis role="bold">Asynchronous.</emphasis>
                
                A Jabber server guaranties delivery of messages while the destination client is online. When a client goes 
                offline, the Jabber server stores and forwards the message to a client when the client reconnects. 
                This feature, apart from being useful in the case of messages between humans, helps with the fact that 
                Jabber can be used as an architecture that enables systems to talk with other systems.

                Consider a scenario with a client that interacts via Jabber with a command control, sends commands, and 
                receives responses. In this scenario, even thought the client goes offline, the system guarantees that 
                the response from the command control is stored and sent to the client when the client goes online again.</para>
            </listitem>
            
            <listitem>
                <para><emphasis role="bold">Decentralized.</emphasis>
                
                By definition, Jabber is decentralized. Therefore, a Jabber central server that provides the service to 
                everybody does not exist. Jabber is a servers network that is independent but simultaneously interconnected. 
                As a result, anyone can run their own Jabber server, creating networks and sub-networks that do not depend 
                on a central backbone and add it as a component of the agent architecture.
                
                A user can choose a server that is trusted by her. She is not forced to use a server that generates suspicion. 
                She may use a server provided by a commercial company of her trust (like her bank or univertity), the one of 
                her employer, etc ... A user can even choose to set up her own Jabber server at home.</para>
            </listitem>
            
            <listitem>
                <para><emphasis role="bold">Secure.</emphasis>
                
                As with all other network services (e.g., HTTP, SMTP, and FTP), security is an important concern with regard 
                to the deployment of IM services based on Jabber technology. One aspect of these services is the ability to 
                enable connections between Jabber servers, thus taking advantage of the "network effect" of existing Jabber 
                servers on the Internet or on a company network.As specified in RFC 3920, the core transport 
                layer for XMPP is an XML streaming protocol that makes it possible to exchange fragments of XML between any
                 two network endpoints. Authentication and channel encryption happen at the XML streaming layer using the 
                IETF-standard protocols for Simple Authentication and Security Layer (SASL) and Transport Layer Security (TLS).
                The XMPP architecture is a pure client-server model, wherein clients connect to servers and (optionally) 
                servers connect to each other for inter-domain communications.</para>
            </listitem>
            
            <listitem>
                <para><emphasis role="bold">Extensible.</emphasis>
            
                Using the power of XML namespaces, anyone can build custom functionality on top of the core protocol, as exemplified by the Jabber Enhancement Proposals (JEPs) coordinated by the Jabber Software Foundation. Jabber was designed from the beginning to be extended. A good example of this are the changes and improvements that have gradually appeared in the Jabber technology without breaking backward compatibilities. To mention some: Support of SSL and GPG encryption; precise information on the state of a message ('is being written', 'the contact has received it' or 'it has been kept in the server'); multi-conference chat rooms (MUC) that allow multiple users to interact simultaneously using virtual channels; a cooperative online 'blackboard' to draw graphics and share multimedia contents among the participants of a conversation (<ulink url="http://hem.fyristorg.com/matben/">The Coccinella</ulink>). These extended functionalities do not require the Jabber servers to be modified at all. They rely on the Jabber clients to implement the necessary features to support them. Thus, in Jabber the power of extending functionalities is in the client.</para>             
            </listitem>
            
            <listitem>
                <para><emphasis role="bold">Flexible.</emphasis>
            
                The most common misconception about Jabber is that it is solely for IM. Jabber is more than a bridge to other IM systems or a set of protocols. IM is just one of the countless ways that an XML-based messaging technology such as Jabber's can be applied. Jabber is a flexible and extensible client/server architecture that routes XML data between clients and services, which plug into Jabber servers as components. The original and core set of components provide the IM features (and support services) that have been discussed.               The XML structures that make up the Jabber protocol are split into top-level tags (also referred to as elements). These tags do not necessarily carry human-generated IM message content; as long as the resulting XML is well-formed, anything goes. Furthermore, the Jabber protocol design makes use of an XML feature that allows total flexibility for extensions, called namespaces. Bearing this in mind, it is clear that Jabber can be deployed to provide solutions far beyond the IM space as well as within it. Jabber applications beyond IM include network management, content syndication, collaboration tools, file sharing, gaming, remote systems monitoring and, now, agent communication.</para>           
            </listitem>         

            </itemizedlist>
            
        </section>
            
    </section>

  </section>

  <section id="spade.basic.spadeplatform">
    <title>The SPADE Agent Platform</title>
    
    <para>Simply put, SPADE is an agent platform based on the XMPP/Jabber technology. This technology offers by itself many features and facilities that ease the construction of MAS, such as an existing communication channel, the concepts of users (agents) and servers (platforms) and an extensible communication protocol based on XML, just like FIPA-ACL. Many other agent platforms exist, but SPADE is the first to base its roots on the XMPP technology.</para>
    
    <para>The SPADE Agent Platform does not require (but strongly recommends) the operation of agents made with the SPADE Agent Library (see next section). The platform itself uses the library to empower its internals, but aside from that, you can develop your own agents in the programming language of your choice and use them with SPADE. The only requirement those agents must fulfill is to be able to communicate through the XMPP protocol. The FIPA-ACL messages will be embedded in XMPP messages. Be warned, however, that some features of the whole SPADE experience may not be available if you do not use the SPADE Agent Library to build your agents.</para>
    
    <para>SPADE is written in the Python programming language. In order to fully understand and use SPADE, a bit of knowledge about Python is required, but, hey! you would not be reading this manual if you weren't a top-notch programmer, wouldn't you?</para>
    
  </section>

  <section id="spade.basic.spadelibrary">
    <title>The SPADE Agent Library</title>
    
    <para>The SPADE Agent Library is a module for the Python programming language for building SPADE agents. It is a collection of classes, functions and tools for creating new SPADE agents that can work with the SPADE Agent Platform. Using it is the best way to start developing your own SPADE agents. In the future, we would like to offer bindings of the SPADE Agent Library for more programming languages, like Java or C#, but for now only Python is supported.</para>
    
    <para>If you have worked with Python before, you will find the SPADE Agent Library easy to understand and use, with classes ready to use and expand, and many functionalities already built in the library. If you have worked with other high-level behavioral agent platforms (like Jade or MadKit) you will find some similarities in the way the library works, although the agent model present in SPADE is a bit different.</para>
    
  </section>

  <section id="spade.basic.features">
    <para>
    The main features of SPADE are:
        <itemizedlist>
        <listitem><para>Developed using Python</para></listitem>
        <listitem><para>Covers the FIPA standard</para></listitem>
        <listitem><para>Implements four MTPs: XMPP, P2P, HTTP and SIMBA</para></listitem>
        <listitem><para>Supports two content languages: FIPA-SL and RDF</para></listitem>
        <listitem><para>SPADE agents do reach their goals by running deliberative and reactive tasks</para></listitem>
        <listitem><para>Has a web interface to manage the platform</para></listitem>
        <listitem><para>Allows its execution in several platforms and operating systems</para></listitem>
        <listitem><para>Presence notification allows the system to determine the current state of the agents in real-time</para></listitem>
        <listitem><para>Multi-user conference allows agents to create organizations and groups of agents</para></listitem>
    </itemizedlist>
    </para>
  </section>

  <section id="spade.basic.whatsnext">
    <title>What's Next?</title>

    <para>If you want to get your hands dirty and start using SPADE right now, head on to the next chapter where a Quickstart Guide awaits you. However if you wish to learn more about SPADE and see how deep the rabbit hole goes, you can go directly to chapter XX.</para>
  </section>
    
</chapter>
